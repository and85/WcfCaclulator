//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.AutoGeneratedServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculatationFault", Namespace="http://schemas.datacontract.org/2004/07/Common.Faults")]
    [System.SerializableAttribute()]
    public partial class CalculatationFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AutoGeneratedServiceReference.ICaclulatorService")]
    public interface ICaclulatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaclulatorService/Square", ReplyAction="http://tempuri.org/ICaclulatorService/SquareResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClientApp.AutoGeneratedServiceReference.CalculatationFault), Action="http://tempuri.org/ICaclulatorService/SquareCalculatationFaultFault", Name="CalculatationFault", Namespace="http://schemas.datacontract.org/2004/07/Common.Faults")]
        int Square(int inputNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaclulatorService/Square", ReplyAction="http://tempuri.org/ICaclulatorService/SquareResponse")]
        System.Threading.Tasks.Task<int> SquareAsync(int inputNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaclulatorService/ThrowUnhandledException", ReplyAction="http://tempuri.org/ICaclulatorService/ThrowUnhandledExceptionResponse")]
        void ThrowUnhandledException();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaclulatorService/ThrowUnhandledException", ReplyAction="http://tempuri.org/ICaclulatorService/ThrowUnhandledExceptionResponse")]
        System.Threading.Tasks.Task ThrowUnhandledExceptionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaclulatorService/OverloadingOperation", ReplyAction="http://tempuri.org/ICaclulatorService/OverloadingOperationResponse")]
        int OverloadingOperation(int inputNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaclulatorService/OverloadingOperation", ReplyAction="http://tempuri.org/ICaclulatorService/OverloadingOperationResponse")]
        System.Threading.Tasks.Task<int> OverloadingOperationAsync(int inputNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaclulatorService/OverloadingOperationFloat", ReplyAction="http://tempuri.org/ICaclulatorService/OverloadingOperationFloatResponse")]
        float OverloadingOperationFloat(float inputNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaclulatorService/OverloadingOperationFloat", ReplyAction="http://tempuri.org/ICaclulatorService/OverloadingOperationFloatResponse")]
        System.Threading.Tasks.Task<float> OverloadingOperationFloatAsync(float inputNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICaclulatorServiceChannel : ClientApp.AutoGeneratedServiceReference.ICaclulatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CaclulatorServiceClient : System.ServiceModel.ClientBase<ClientApp.AutoGeneratedServiceReference.ICaclulatorService>, ClientApp.AutoGeneratedServiceReference.ICaclulatorService {
        
        public CaclulatorServiceClient() {
        }
        
        public CaclulatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CaclulatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CaclulatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CaclulatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Square(int inputNumber) {
            return base.Channel.Square(inputNumber);
        }
        
        public System.Threading.Tasks.Task<int> SquareAsync(int inputNumber) {
            return base.Channel.SquareAsync(inputNumber);
        }
        
        public void ThrowUnhandledException() {
            base.Channel.ThrowUnhandledException();
        }
        
        public System.Threading.Tasks.Task ThrowUnhandledExceptionAsync() {
            return base.Channel.ThrowUnhandledExceptionAsync();
        }
        
        public int OverloadingOperation(int inputNumber) {
            return base.Channel.OverloadingOperation(inputNumber);
        }
        
        public System.Threading.Tasks.Task<int> OverloadingOperationAsync(int inputNumber) {
            return base.Channel.OverloadingOperationAsync(inputNumber);
        }
        
        public float OverloadingOperationFloat(float inputNumber) {
            return base.Channel.OverloadingOperationFloat(inputNumber);
        }
        
        public System.Threading.Tasks.Task<float> OverloadingOperationFloatAsync(float inputNumber) {
            return base.Channel.OverloadingOperationFloatAsync(inputNumber);
        }
    }
}
